help:
  show: Show help
  times:
    duree_cycle: Execution time for one work cycle.
    duree_left: Remaining execution time for the job in the current cycle.
    duree_totale: Total execution time (all cycles) performed on the job.
    duree_worked: Execution time already performed on the job.
  manual:
    title: ETC Manual
    ordre: >
      intro
      term
      task_data
      stop_report
      durcycvsdursess

  deroulement_travail:
    title: How Task Progress Works
    level: '##'
    text: |
      Everything starts when ETC selects the first task from your list, 
      or a random one if you‚Äôve chosen that option.
      
      The task appears in the window, along with several buttons:

      | Button | Name | Action |
      | --- | --- | --- |
      | t(ui.button.start) | Start | Begins work on the task. A timer shows either the elapsed time or the remaining time (for the cycle), depending on your settings. |
      | t(ui.button.change) | Another Task | If you don‚Äôt like the suggested task, you can request another one. Note: this option can only be used once per session. |
      | t(ui.button.open_project) | Open Project | Opens the project folder on your desktop. |
      | t(ui.button.run) | Run Script | If a script is defined for the task, this button lets you run it. |

      To start tracking time, click the t(ui.button.start) button.  
      If you‚Äôve selected the **Stopwatch** mode, time starts counting up from 0:00:00.  
      If you‚Äôve selected the **Countdown** mode, the timer starts from the duration set for the task in the cycle (usually two hours), or from the custom session time you‚Äôve defined for that specific task, and counts down to zero.

      You can pause your work at any time using the t(ui.button.pause) button.  
      The timer will stop until you resume the task by clicking t(ui.button.restart).

      After working for at least one minute, you can decide to stop by clicking t(ui.button.stop).

      You can also let the timer run until the end. When the time is almost up, 
      the application will notify you that the session is nearly over and that 
      it‚Äôs time to move on to the next task.

      A panel titled t(ui.title.stop_report) will then appear.  
      This panel allows you to record a short report. The report isn‚Äôt meant only 
      to describe what you‚Äôve done (although you can use it for that), but more 
      importantly to note what should be done next ‚Äî so you can quickly resume 
      work later on.  
      (For more details, see help(stop_report)).

      In this panel, the t(ui.button.dont_save_time_and_report) button lets you 
      discard the recorded time if, for example, you feel the session wasn‚Äôt 
      productive.

      Once you save your report, ETC updates the task‚Äôs time and immediately 
      presents the next task in your workflow.

  set_preferences:
    title: Setting Your Preferences
    level: '##'
    text: |
      First, open the application after it has finished loading.  
      To access your preferences, click the (‚öôÔ∏è) button.  
      There, you can set the following options:

      * the **language** of the interface and messages,  
      * the **default task duration** within a cycle (not the total completion time),  
      * the **UI mode**, dark or light,  
      * the appearance of the **clock** (or stopwatch),  
      * the **time tracking mode**, either continuous or countdown,  
      * the **path to the task file** (which will be created with the tasks you define ‚Äî see help(define_tasks)),  
      * the **task selection mode**, either random or sequential, depending on the order in your list.

      *(You‚Äôll also find some useful tools in this panel to reset the current cycle or open the external manual.)*

      Once you‚Äôve made your changes, close the preferences window after saving them,  
      so that all updates are applied correctly.

  define_tasks:
    title: Defining Your Task List
    level: "##"
    text: |
      To define your list of tasks, open the task panel using the ‚úçüèΩ button.  
      This is where you can create and manage your **tasks**, **projects**, or **jobs** ‚Äî  
      whatever term you prefer.

      Use the ‚Äú‚ûï‚Äù button to create a new task, which will be added to the bottom of the list.  
      When you first launch the application, this list should contain only one sample task.

      Fill in the fields with the information you want.  
      (Even if most properties are self-explanatory, you can find detailed explanations  
      in help(task_data).)

      Once you‚Äôve set up your list and arranged the tasks in order using the arrow buttons,  
      save it by clicking t(ui.button.save).  
      You‚Äôll then return to the main panel, ready to start your first task.

      > Note: If you prefer, you can also manage your tasks through a YAML file  
      or even generate them programmatically from another application.  
      Simply edit the YAML file whose path is defined in the application‚Äôs preferences.

  terminologie:
    title: Terminology
    level: '##'
    text: |
      | Term | | Description |
      | --- | --- | --- |
      | Cycle | | A *c.* is a complete loop over all tasks to be performed. |
      | Remaining time | | A *rem. t.* corresponds to the time left to complete the work within the current cycle. |
      | Time spent | | The *spent t.* corresponds to the time dedicated to the work/project during the current cycle. |
  stop_report:
    title: Stop Report
    level: '##'
    text: |
      The *end report* appears when you stop (STOP) working
      on a specific task.
      
      The *end report* is used to prepare for the next work cycle,
      so the task can be resumed as quickly and efficiently
      as possible.

      To write this report, you should project yourself into the next
      work session and think about the information you'll need
      to immediately pick up where you left off. For example,
      note the files you're working on and the exact lines involved.

      The supported format is [Markdown](https://en.wikipedia.org/wiki/Markdown).
  task_data:
    title: Task data
    level: '##'
    text: |
      | Property | | Description |
      | --- | --- | --- |
      | Active/Inactive | | This menu allows you to enable or disable a task. A disabled task will not appear in your work cycle. |
      | Project | | The title of the project or task. |
      | Content | | Here you define what needs to be done, concretely. It is a [Markdown](https://${pref.getLang()}.wikipedia.org/wiki/Markdown) text, so it can include simple formatting. |
      | Folder | | The path to the folder. This information is crucial as it allows tracking activity on the task. |
      | Script | | The strength of this app lies in allowing you to define a script to be executed at any time during the work (often beforehand). This script, which can be in any language, opens up unlimited possibilities. |
      | Duration | | Sets a duration specific to the task. If this value is not defined, the default duration is used. |
      | Session duration | | Optionally, you can define a session duration different from the cycle duration. Subtle, yet clear in practice. For full understanding, consult help(durcycvsdursess). |
  introduction:
    title: INTRODUCTION
    level: '##'
    text: |
      Welcome to the modular help system of the ETC application
      (Etcetera), which allows you to work on several tasks in parallel.

      The operation of this application is radically different
      from what you may be used to and is particularly well-suited
      to situations where you have multiple projects running concurrently,
      without neglecting any of them, by dedicating time each day
      or each week to each one.
  task_list:
    title: Task list
    level: '##'
    text: |
      The task list is the first thing to define in order to use
      the application.

      Simply click on the ‚úçüèΩ button in the main window
      to open the tasks and general data panel.
      Then click the ‚Äú+‚Äù button to add a task.
      The process is intuitive, but let‚Äôs detail the various
      properties you can define:

      t(help.terminologie.title)

      t(help.terminologie.text)

      | Property | | Description |
      | --- | --- | --- |
      | Active/Inactive | | This menu lets you enable or disable a task. A disabled task will not appear in your work cycle. |
      | Project | | The title of the project or work item. |
      | Content | | This is where you specify what needs to be done, concretely. It is written in [Markdown](https://${pref.getLang()}.wikipedia.org/wiki/Markdown), so it can include simple formatting. |
      | Folder | | The path to the folder. This information is crucial, as it allows the application to track activity on the task. |
      | Script | | The strength of this app lies in allowing you to define a script to be executed at any time during the work process (often before). This script, written in any language, opens up unlimited possibilities. |
      | Duration | | Defines a duration specific to the task. If not specified, the default duration is used. |
      | Session duration | | Optionally, a session duration can be defined, different from the cycle duration. Subtle, yet clear once understood. See hlink(Cycle duration versus session duration, duree_cycle_vs_duree_sess) for details. |

  durcycvsdursess:
    title: Cycle duration versus session duration
    level: '###'
    text: |
      When a session duration is defined (necessarily shorter
      than the cycle duration), the application behaves differently
      with the task: instead of waiting until the end of the task‚Äôs
      ‚Äúcycle duration‚Äù (or default duration) to terminate the current task,
      it ends it once the *session duration* is reached (see the example below).

      Concretely, this allows you to allocate more total time to a task
      within a cycle while defining a standard work duration per session
      (i.e., per day). Otherwise, the user must monitor the time manually‚Äî
      that‚Äôs the key difference.

      ## Examples

      ### With identical durations

      Imagine six tasks without defined durations. The cycle duration
      will then match the session duration. If this is set to 2 hours,
      the process will unfold as follows:

      - Upon launching the application, an initial task (e.g., T4) is
        randomly selected. The user works on it for 2 hours.
      - After 2 hours, they are notified and another task (e.g., T2) is proposed.
      - After another 2 hours, they are notified again and move on.
      - At the end of an 8-hour day, four tasks will have been completed.
      - The next day, the 5th (e.g., T1) and 6th (e.g., T3) tasks are proposed.
        After about 4 hours, one full cycle will have been completed,
        and a new one begins.

      In this approach, all projects have equal importance
      and receive equal working time.

      In practice, however, some projects require more time. Hence the next method.

      ### With different durations

      In this scenario, task T2 requires twice as much work, and the user
      decides to allocate twice as much time‚Äî4 hours per cycle.

      - The day starts with task T6.
      - After 2 hours, the application proposes the next task,
        T2. If the user doesn‚Äôt want to work 4 hours straight, they can
        stop after around 2 hours.
      - The application records the work time and notes that
        time remains on this project.
      - It then proposes the next task.
      - At the end of the day, as before, two tasks remain untouched,
        and there are 2 hours left on T2.
      - The next day, the app proposes those two tasks plus the remaining
        2 hours on T2.

      This approach is perfectly valid and convenient even if one
      doesn‚Äôt know exactly how much time will be spent on T2 in a day‚Äî
      perhaps there will be enough time and energy to do the full 4 hours.

      But to better balance the workload, we use the third approach,
      involving the *session duration*.

      ### With session durations

      This time, we specify that 4 hours should be devoted to T2 per cycle,
      but only 2 hours per session (per day). We therefore set its
      *session duration* to 2 hours.

      - The day starts normally, for example with task T1.
      - After 2 hours, the app suggests switching to T2.
      - Two hours later‚Äîsince that‚Äôs the defined *session duration*‚Äî
        the app suggests moving on to the next task (though the user may
        refuse and continue working on T2).
      - The user moves on.
      - And so on, until the next day.

      Naturally, these examples only featured one task with varying durations,
      but in reality, each task may have its own *cycle duration* and
      *session duration* to accommodate any workflow.
